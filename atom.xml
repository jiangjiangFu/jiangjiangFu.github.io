<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姜姜</title>
  
  <subtitle>姜姜的秘密空间</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-08-06T18:22:57.936Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>jiangjiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue常用</title>
    <link href="http://example.com/2025/08/04/Vue%E5%B8%B8%E7%94%A8/"/>
    <id>http://example.com/2025/08/04/Vue%E5%B8%B8%E7%94%A8/</id>
    <published>2025-08-04T13:41:44.000Z</published>
    <updated>2025-08-06T18:22:57.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-3-工作常用笔记"><a href="#Vue-3-工作常用笔记" class="headerlink" title="Vue 3 工作常用笔记"></a>Vue 3 工作常用笔记</h1><blockquote><p>✅ 推荐使用 <code>Composition API</code>，搭配 <code>&lt;script setup&gt;</code> 书写更简洁。</p></blockquote><h2 id="🌀-生命周期函数"><a href="#🌀-生命周期函数" class="headerlink" title="🌀 生命周期函数"></a>🌀 生命周期函数</h2><p>Vue 的生命周期函数允许你在组件生命周期的特定节点执行代码，通常用于初始化、请求数据、清理资源等操作。</p><table><thead><tr><th>生命周期</th><th>Composition API 示例</th><th>说明</th></tr></thead><tbody><tr><td>挂载后 ✅</td><td><code>onMounted(() =&gt; &#123; ... &#125;)</code></td><td>DOM 已挂载，请求数据&#x2F;初始化</td></tr><tr><td>卸载后 🪃</td><td><code>onUnmounted(() =&gt; &#123; ... &#125;)</code></td><td>组件卸载时，删除监听器&#x2F;清理</td></tr><tr><td>更新后</td><td><code>onUpdated(() =&gt; &#123; ... &#125;)</code></td><td>DOM 更新后调用</td></tr></tbody></table><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onMounted, onUnmounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;组件已挂载&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">onUnmounted(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;组件已卸载&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="🔗-组件通信"><a href="#🔗-组件通信" class="headerlink" title="🔗 组件通信"></a>🔗 组件通信</h2><h3 id="1-父传子-props"><a href="#1-父传子-props" class="headerlink" title="1. 父传子 (props)"></a>1. 父传子 (props)</h3><p>父组件传通过 <code>props</code> 向子组件传通数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;MyButton :label=&quot;&#x27; 点击我 &#x27;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps&lt;&#123; label: string &#125;&gt;();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button&gt;&#123;&#123; props.label &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="2-子传父-emit"><a href="#2-子传父-emit" class="headerlink" title="2. 子传父 (emit)"></a>2. 子传父 (emit)</h3><p>子组件通过事件 <code>emit</code> 通知父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const emit = defineEmits([&#x27;clicked&#x27;]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;emit(&#x27;clicked&#x27;)&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;MyButton @clicked=&quot;handleClick&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="3-全局状态-Pinia"><a href="#3-全局状态-Pinia" class="headerlink" title="3. 全局状态 (Pinia)"></a>3. 全局状态 (Pinia)</h3><p>适合跨组件共享状态，下文有实例</p><h2 id="📌-常用指令"><a href="#📌-常用指令" class="headerlink" title="📌 常用指令"></a>📌 常用指令</h2><table><thead><tr><th>指令</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>v-if</td><td>条件渲染</td><td><code>&lt;div v-if=&quot;show&quot;&gt;...&lt;/div&gt;</code></td></tr><tr><td>v-for</td><td>列表渲染</td><td><code>&lt;li v-for=&quot;item in list&quot;&gt;...&lt;/li&gt;</code></td></tr><tr><td>v-model</td><td>双向绑定</td><td><code>&lt;input v-model=&quot;form.name&quot; /&gt;</code></td></tr><tr><td>v-show</td><td>控制显示(通过CSS)</td><td><code>&lt;div v-show=&quot;visible&quot;&gt;...&lt;/div&gt;</code></td></tr></tbody></table><h2 id="⚙️-Composition-API-常用"><a href="#⚙️-Composition-API-常用" class="headerlink" title="⚙️ Composition API 常用"></a>⚙️ Composition API 常用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, computed, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>); <span class="comment">// 基本类型响应式</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span> &#125;); <span class="comment">// 对象响应式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>); <span class="comment">// 求派生值</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count 变化:&#x27;</span>, newVal);</span><br><span class="line">&#125;); <span class="comment">// 监听响应式变化</span></span><br></pre></td></tr></table></figure><h2 id="🚣-Vue-Router-4"><a href="#🚣-Vue-Router-4" class="headerlink" title="🚣 Vue Router 4"></a>🚣 Vue Router 4</h2><p>路由配置 + 跳转</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Home.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/About.vue&#x27;</span>) &#125; <span class="comment">// 懲載</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRoute, useRouter &#125; from &#x27;vue-router&#x27;;</span><br><span class="line">const route = useRoute();</span><br><span class="line">const router = useRouter();</span><br><span class="line"></span><br><span class="line">function goHome() &#123;</span><br><span class="line">  router.push(&#x27;/&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="🥉-Pinia-示例"><a href="#🥉-Pinia-示例" class="headerlink" title="🥉 Pinia 示例"></a>🥉 Pinia 示例</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/counter.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/store/counter&#x27;;</span><br><span class="line">const counter = useCounterStore();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; counter.count &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;counter.increment&quot;&gt;加一&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="🧰-工程化建议"><a href="#🧰-工程化建议" class="headerlink" title="🧰 工程化建议"></a>🧰 工程化建议</h2><ul><li>使用 <code>defineAsyncComponent</code> 懲載组件</li><li>深层数据避免性能问题：考虑 <code>shallowReactive</code></li><li>统一 axios 封装：错误处理 &#x2F; Token 插入</li><li>目录结构模块化：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">├─ components/   <span class="comment"># 公共组件</span></span><br><span class="line">├─ views/        <span class="comment"># 页面视图</span></span><br><span class="line">├─ store/        <span class="comment"># 状态管理</span></span><br><span class="line">├─ router/       <span class="comment"># 路由配置</span></span><br><span class="line">├─ utils/        <span class="comment"># 工具函数</span></span><br><span class="line">└─ assets/       <span class="comment"># 静态资源</span></span><br></pre></td></tr></table></figure><h2 id="📏-元素监听"><a href="#📏-元素监听" class="headerlink" title="📏 元素监听"></a>📏 元素监听</h2><p>实现监听 DOM 事件，如滚动&#x2F;点击</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;boxRef&quot;&gt;监听点击&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted, onUnmounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">const boxRef = ref(null);</span><br><span class="line">function handleClick() &#123; console.log(&#x27;clicked&#x27;); &#125;</span><br><span class="line">onMounted(() =&gt; boxRef.value?.addEventListener(&#x27;click&#x27;, handleClick));</span><br><span class="line">onUnmounted(() =&gt; boxRef.value?.removeEventListener(&#x27;click&#x27;, handleClick));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意: 系统性性能 + 内存泄漏，必须卸载时移除监听</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-3-工作常用笔记&quot;&gt;&lt;a href=&quot;#Vue-3-工作常用笔记&quot; class=&quot;headerlink&quot; title=&quot;Vue 3 工作常用笔记&quot;&gt;&lt;/a&gt;Vue 3 工作常用笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;✅ 推荐使用 &lt;code&gt;Comp</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>python基础笔记</title>
    <link href="http://example.com/2025/07/28/python%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2025/07/28/python%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</id>
    <published>2025-07-28T15:03:14.000Z</published>
    <updated>2025-08-06T18:22:57.936Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Python 基础笔记</span></span><br><span class="line"></span><br><span class="line">以下内容为 Python 基础知识整理，涵盖常见的数据类型及其常用操作。每个章节包含示例代码和简单讲解，便于复习和后续扩展。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 1. 字符串（String）</span></span><br><span class="line"></span><br><span class="line">字符串是不可变的字符序列，常用操作：</span><br><span class="line"></span><br><span class="line"><span class="section">### 1.1 查找与判断</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="code">`str.find(sub[, start[, end]])`</span></span><br><span class="line"><span class="bullet">  -</span> 返回子字符串 <span class="code">`sub`</span> 第一次出现的索引，找不到则返回 <span class="code">`-1`</span>。</span><br><span class="line"><span class="bullet">  -</span> 示例：</span><br><span class="line"><span class="code">    ```python</span></span><br><span class="line"><span class="code">    name = &#x27;123456789&#x27;</span></span><br><span class="line"><span class="code">    print(name.find(&#x27;6&#x27;, 5))  # 输出: 5</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">-</span> <span class="code">`str.index(sub[, start[, end]])`</span></span><br><span class="line"><span class="bullet">  -</span> 类似 <span class="code">`find`</span>，但找不到时抛出 <span class="code">`ValueError`</span>。</span><br><span class="line"><span class="bullet">  -</span> 示例：</span><br><span class="line"><span class="code">    ```python</span></span><br><span class="line"><span class="code">    name1 = &#x27;123456789&#x27;</span></span><br><span class="line"><span class="code">    print(name1.index(&#x27;9&#x27;))  # 输出: 8</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">-</span> <span class="code">`sub in str`</span> / <span class="code">`sub not in str`</span></span><br><span class="line"><span class="bullet">  -</span> 判断子字符串是否存在。</span><br><span class="line"><span class="bullet">  -</span> 示例：</span><br><span class="line"><span class="code">    ```python</span></span><br><span class="line"><span class="code">    print(&#x27;6&#x27; in name)      # 输出: True</span></span><br><span class="line"><span class="code">    print(&#x27;0&#x27; not in name)  # 输出: True</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">### 1.2 统计与替换</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="code">`str.count(sub[, start[, end]])`</span></span><br><span class="line"><span class="bullet">  -</span> 返回子字符串 <span class="code">`sub`</span> 出现的次数。</span><br><span class="line"><span class="bullet">  -</span> 示例：</span><br><span class="line"><span class="code">    ```python</span></span><br><span class="line"><span class="code">    name2 = &#x27;1234123121256789&#x27;</span></span><br><span class="line"><span class="code">    print(name2.count(&#x27;1&#x27;))  # 输出: 5</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">-</span> <span class="code">`str.replace(old, new[, count])`</span></span><br><span class="line"><span class="bullet">  -</span> 将所有或前 <span class="code">`count`</span> 个 <span class="code">`old`</span> 子串替换为 <span class="code">`new`</span>。</span><br><span class="line"><span class="bullet">  -</span> 示例：</span><br><span class="line"><span class="code">    ```python</span></span><br><span class="line"><span class="code">    name3 = &#x27;123415678191&#x27;</span></span><br><span class="line"><span class="code">    # 仅替换第一个 &#x27;1&#x27; 为 &#x27;4&#x27;</span></span><br><span class="line"><span class="code">    print(name3.replace(&#x27;1&#x27;, &#x27;4&#x27;, 1))  # 输出: &#x27;423415678191&#x27;</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">### 1.3 分割与拼接</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="code">`str.split(sep=None, maxsplit=-1)`</span></span><br><span class="line"><span class="bullet">  -</span> 根据分隔符 <span class="code">`sep`</span> 拆分字符串，返回列表。</span><br><span class="line"><span class="bullet">  -</span> 示例：</span><br><span class="line"><span class="code">    ```python</span></span><br><span class="line"><span class="code">    text = &#x27;Hello World from Python&#x27;</span></span><br><span class="line"><span class="code">    print(text.split())  # [&#x27;Hello&#x27;, &#x27;World&#x27;, &#x27;from&#x27;, &#x27;Python&#x27;]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    csv = &#x27;apple,banana,orange&#x27;</span></span><br><span class="line"><span class="code">    print(csv.split(&#x27;,&#x27;))  # [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    # 多字符分隔符</span></span><br><span class="line"><span class="code">    text2 = &#x27;one&lt;-&gt;two&lt;-&gt;three&#x27;</span></span><br><span class="line"><span class="code">    print(text2.split(&#x27;&lt;-&gt;&#x27;))  # [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    # 限制分割次数</span></span><br><span class="line"><span class="code">    text3 = &#x27;a b c d e&#x27;</span></span><br><span class="line"><span class="code">    print(text3.split(&#x27; &#x27;, 2))  # [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c d e&#x27;]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    # 连续分隔符</span></span><br><span class="line"><span class="code">    text4 = &#x27;a,,b,c&#x27;</span></span><br><span class="line"><span class="code">    print(text4.split(&#x27;,&#x27;))  # [&#x27;a&#x27;, &#x27;&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    # 过滤空字符串</span></span><br><span class="line"><span class="code">    result = [x for x in text4.split(&#x27;,&#x27;) if x != &#x27;&#x27;]</span></span><br><span class="line"><span class="code">    print(result)  # [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">-</span> <span class="code">`sep.join(iterable)`</span></span><br><span class="line"><span class="bullet">  -</span> 将可迭代对象中的字符串以 <span class="code">`sep`</span> 连接。</span><br><span class="line"><span class="bullet">  -</span> 示例：</span><br><span class="line"><span class="code">    ```python</span></span><br><span class="line"><span class="code">    parts = [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span></span><br><span class="line"><span class="code">    print(&#x27;-&#x27;.join(parts))  # &#x27;one-two-three&#x27;</span></span><br><span class="line"><span class="code">    ```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section">### 1.4 大小写与格式化</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="code">`.lower()`</span>, <span class="code">`.upper()`</span>, <span class="code">`.title()`</span>, <span class="code">`.capitalize()`</span></span><br><span class="line"><span class="bullet">-</span> <span class="code">`.startswith(prefix[, start[, end]])`</span>, <span class="code">`.endswith(suffix[, start[, end]])`</span></span><br><span class="line"><span class="bullet">-</span> 示例：</span><br><span class="line">  <span class="code">```python</span></span><br><span class="line"><span class="code">  text1 = &#x27;Asdasdas&#x27;</span></span><br><span class="line"><span class="code">  print(text1.lower())      # &#x27;asdasdas&#x27;</span></span><br><span class="line"><span class="code">  print(text1.upper())      # &#x27;ASDASDAS&#x27;</span></span><br><span class="line"><span class="code">  print(text1.title())      # &#x27;Asdasdas&#x27;</span></span><br><span class="line"><span class="code">  print(text1.capitalize()) # &#x27;Asdasdas&#x27;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">  st = &#x27;stasda&#x27;</span></span><br><span class="line"><span class="code">  print(st.startswith(&#x27;stas&#x27;))     # True</span></span><br><span class="line"><span class="code">  print(st.endswith(&#x27;a&#x27;))          # True</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-列表（List）"><a href="#2-列表（List）" class="headerlink" title="2. 列表（List）"></a>2. 列表（List）</h2><p>列表是可变的序列类型，支持混合元素。常用操作：</p><h3 id="2-1-创建与访问"><a href="#2-1-创建与访问" class="headerlink" title="2.1 创建与访问"></a>2.1 创建与访问</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(li, <span class="built_in">type</span>(li))      <span class="comment"># [1, 2, 3, &#x27;4&#x27;] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">0</span>:<span class="number">3</span>])           <span class="comment"># 切片: [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="2-2-增加元素"><a href="#2-2-增加元素" class="headerlink" title="2.2 增加元素"></a>2.2 增加元素</h3><ul><li><code>append(x)</code>：在末尾添加元素 <code>x</code>。</li><li><code>extend(iterable)</code>：在末尾扩展可迭代对象。</li><li><code>insert(i, x)</code>：在索引 <code>i</code> 插入元素 <code>x</code>。</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">li.append(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">li.extend(<span class="string">&#x27;four&#x27;</span>)  <span class="comment"># 将字符串拆分成字符添加</span></span><br><span class="line">li.insert(<span class="number">1</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure><h3 id="2-3-修改元素"><a href="#2-3-修改元素" class="headerlink" title="2.3 修改元素"></a>2.3 修改元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure><h3 id="2-4-查找与判断"><a href="#2-4-查找与判断" class="headerlink" title="2.4 查找与判断"></a>2.4 查找与判断</h3><ul><li><code>x in li</code>, <code>x not in li</code></li></ul><h3 id="2-5-删除元素"><a href="#2-5-删除元素" class="headerlink" title="2.5 删除元素"></a>2.5 删除元素</h3><ul><li><code>del li[i]</code></li><li><code>li.pop([i])</code>：默认删除最后一个。</li><li><code>li.remove(x)</code>：删除第一次出现的 <code>x</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> li[<span class="number">0</span>]</span><br><span class="line">li.pop()</span><br><span class="line">li.remove(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment"># []</span></span><br></pre></td></tr></table></figure><h3 id="2-6-排序与反转"><a href="#2-6-排序与反转" class="headerlink" title="2.6 排序与反转"></a>2.6 排序与反转</h3><ul><li><code>li.reverse()</code>：反转列表顺序。</li><li><code>li.sort(reverse=False)</code>：原地排序。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>, <span class="number">41</span>, <span class="number">4321</span>, <span class="number">234</span>, <span class="number">32</span>]</span><br><span class="line">li.reverse()</span><br><span class="line">li.sort()</span><br><span class="line">li.sort(reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="2-7-列表推导式"><a href="#2-7-列表推导式" class="headerlink" title="2.7 列表推导式"></a>2.7 列表推导式</h3><p>高效构建列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">b = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">c = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="3-元组（Tuple）"><a href="#3-元组（Tuple）" class="headerlink" title="3. 元组（Tuple）"></a>3. 元组（Tuple）</h2><p>元组是不可变序列，常用于不可修改的数据集合。创建单元素元组需加逗号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tua = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><p>访问方式与列表类似，但不能修改。</p><hr><h2 id="4-字典（Dict）"><a href="#4-字典（Dict）" class="headerlink" title="4. 字典（Dict）"></a>4. 字典（Dict）</h2><p>键值对映射，无序（Python3.7+ 保持插入顺序）。</p><h3 id="4-1-创建与访问"><a href="#4-1-创建与访问" class="headerlink" title="4.1 创建与访问"></a>4.1 创建与访问</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ada&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(F[<span class="string">&#x27;age&#x27;</span>])         <span class="comment"># 12，键不存在时抛错</span></span><br><span class="line"><span class="built_in">print</span>(F.get(<span class="string">&#x27;name&#x27;</span>))    <span class="comment"># &#x27;ada&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(F.get(<span class="string">&#x27;nam&#x27;</span>, <span class="string">&#x27;不存在&#x27;</span>))  <span class="comment"># 自定义默认值</span></span><br></pre></td></tr></table></figure><h3 id="4-2-新增与修改"><a href="#4-2-新增与修改" class="headerlink" title="4.2 新增与修改"></a>4.2 新增与修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;bbb&#x27;</span>   <span class="comment"># 修改</span></span><br><span class="line">F[<span class="string">&#x27;job&#x27;</span>] = <span class="string">&#x27;engineer&#x27;</span>  <span class="comment"># 新增</span></span><br></pre></td></tr></table></figure><h3 id="4-3-删除"><a href="#4-3-删除" class="headerlink" title="4.3 删除"></a>4.3 删除</h3><ul><li><code>del F[key]</code></li><li><code>F.pop(key)</code></li><li><code>F.popitem()</code>：删除并返回最后一个键值对。</li><li><code>F.clear()</code>：清空所有项。</li></ul><h3 id="4-4-遍历与长度"><a href="#4-4-遍历与长度" class="headerlink" title="4.4 遍历与长度"></a>4.4 遍历与长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(F))      <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(F.keys())</span><br><span class="line"><span class="built_in">print</span>(F.values())</span><br><span class="line"><span class="built_in">print</span>(F.items())</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> F.items():</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br></pre></td></tr></table></figure><hr><h2 id="5-集合（Set）"><a href="#5-集合（Set）" class="headerlink" title="5. 集合（Set）"></a>5. 集合（Set）</h2><p>无序不重复元素集合，常用于去重、集合运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">s2 = <span class="built_in">set</span>()  <span class="comment"># 空集合</span></span><br></pre></td></tr></table></figure><h3 id="5-1-基本操作"><a href="#5-1-基本操作" class="headerlink" title="5.1 基本操作"></a>5.1 基本操作</h3><ul><li>添加：<code>s1.add(x)</code>，<code>s1.update(iterable)</code></li><li>删除：<code>s1.remove(x)</code> &#x2F; <code>s1.discard(x)</code> &#x2F; <code>s1.pop()</code></li><li>清空：<code>s1.clear()</code></li></ul><h3 id="5-2-集合运算"><a href="#5-2-集合运算" class="headerlink" title="5.2 集合运算"></a>5.2 集合运算</h3><ul><li>交集：<code>s1 &amp; s2</code> or <code>s1.intersection(s2)</code></li><li>并集：<code>s1 | s2</code> or <code>s1.union(s2)</code></li><li>差集：<code>s1 - s2</code> or <code>s1.difference(s2)</code></li><li>对称差集：<code>s1 ^ s2</code> or <code>s1.symmetric_difference(s2)</code></li></ul><hr><h2 id="6-类型转换与拷贝"><a href="#6-类型转换与拷贝" class="headerlink" title="6. 类型转换与拷贝"></a>6. 类型转换与拷贝</h2><h3 id="6-1-类型转换"><a href="#6-1-类型转换" class="headerlink" title="6.1 类型转换"></a>6.1 类型转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;123&#x27;</span>)       <span class="comment"># 字符串转整数</span></span><br><span class="line"><span class="built_in">float</span>(<span class="string">&#x27;1.23&#x27;</span>)    <span class="comment"># 字符串转浮点数</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">123</span>)         <span class="comment"># 任意类型转字符串</span></span><br><span class="line"><span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>)      <span class="comment"># 字符串转列表 [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br><span class="line"><span class="built_in">tuple</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])   <span class="comment"># 列表转元组</span></span><br><span class="line"><span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>])   <span class="comment"># 去重转集合 &#123;1,2,3&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>eval(字符串) 将字符串作为代码执行并返回结果，不安全，慎用。</p></blockquote><h3 id="6-2-深拷贝与浅拷贝"><a href="#6-2-深拷贝与浅拷贝" class="headerlink" title="6.2 深拷贝与浅拷贝"></a>6.2 深拷贝与浅拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">b = copy.copy(a)       <span class="comment"># 浅拷贝</span></span><br><span class="line">c = copy.deepcopy(a)   <span class="comment"># 深拷贝</span></span><br></pre></td></tr></table></figure><ul><li>浅拷贝：复制外层，嵌套对象共享。</li><li>深拷贝：完全独立，数据完全隔离。</li></ul><hr><h2 id="7-可变与不可变类型"><a href="#7-可变与不可变类型" class="headerlink" title="7. 可变与不可变类型"></a>7. 可变与不可变类型</h2><ul><li>可变：list、dict、set</li><li>不可变：int、float、bool、str、tuple</li></ul><hr><h2 id="8-补充工具函数"><a href="#8-补充工具函数" class="headerlink" title="8. 补充工具函数"></a>8. 补充工具函数</h2><ul><li><code>chr(i)</code>：整数转字符</li><li><code>ord(c)</code>：字符转整数</li><li><code>len(obj)</code>：获取长度</li><li><code>type(obj)</code>：查看类型</li></ul><hr><h2 id="9-后续扩展"><a href="#9-后续扩展" class="headerlink" title="9. 后续扩展"></a>9. 后续扩展</h2><blockquote><p>（在此处留白，用于添加更多笔记，如函数、模块、异常处理等）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    <category term="python基础" scheme="http://example.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>免费的图床方案</title>
    <link href="http://example.com/2025/07/22/%E5%85%8D%E8%B4%B9%E7%9A%84%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2025/07/22/%E5%85%8D%E8%B4%B9%E7%9A%84%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/</id>
    <published>2025-07-22T23:45:48.000Z</published>
    <updated>2025-08-06T18:22:57.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于微博图床的延伸"><a href="#基于微博图床的延伸" class="headerlink" title="基于微博图床的延伸"></a>基于微博图床的延伸</h1><h2 id="ipfsscan方案"><a href="#ipfsscan方案" class="headerlink" title="ipfsscan方案"></a><a href="https://ipfsscan.io/">ipfsscan方案</a></h2><h3 id="使用方法获取微博中的图片地址，去掉微博图片链接中域名部分后的链接"><a href="#使用方法获取微博中的图片地址，去掉微博图片链接中域名部分后的链接" class="headerlink" title="使用方法获取微博中的图片地址，去掉微博图片链接中域名部分后的链接"></a>使用方法获取微博中的图片地址，去掉微博图片链接中域名部分后的链接</h3><p>使用ipfsscan.io将图片上传到ipfs（由于图片上传图床不建议隐私图片）</p><p>这是获取到的地址<a href="https://wx4.sinaimg.cn/orj360/0073d53Lgy1hnk48g7mgwj32c0340hdt.jpg">https://wx4.sinaimg.cn/orj360/0073d53Lgy1hnk48g7mgwj32c0340hdt.jpg</a></p><p>可以在网页版微博中复制</p><p>然后删掉前面的https:&#x2F;&#x2F;</p><p>改为<a href="https://cdn.ipfsscan.io/weibo/">https://cdn.ipfsscan.io/weibo/</a></p><p>像这样<a href="https://cdn.ipfsscan.io/weibo/wx4.sinaimg.cn/orj360/0073d53Lgy1hnk48g7mgwj32c0340hdt.jpg">https://cdn.ipfsscan.io/weibo/wx4.sinaimg.cn/orj360/0073d53Lgy1hnk48g7mgwj32c0340hdt.jpg</a><br><img src="https://cdn.ipfsscan.io/weibo/wx4.sinaimg.cn/orj360/0073d53Lgy1hnk48g7mgwj32c0340hdt.jpg" alt="看文字就是失效了" title="Magic Gardens"></p><p>！！因为不是自己的图床切记不要上传隐私内容，并且图床是有可能失效的，建议使用自己的图床但因为是免费的所以只能这样了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于微博图床的延伸&quot;&gt;&lt;a href=&quot;#基于微博图床的延伸&quot; class=&quot;headerlink&quot; title=&quot;基于微博图床的延伸&quot;&gt;&lt;/a&gt;基于微博图床的延伸&lt;/h1&gt;&lt;h2 id=&quot;ipfsscan方案&quot;&gt;&lt;a href=&quot;#ipfsscan方案&quot; cla</summary>
      
    
    
    
    <category term="图床" scheme="http://example.com/categories/%E5%9B%BE%E5%BA%8A/"/>
    
    
    <category term="图床" scheme="http://example.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>这里是新的开始</title>
    <link href="http://example.com/2025/07/21/%E8%BF%99%E9%87%8C%E6%98%AF%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://example.com/2025/07/21/%E8%BF%99%E9%87%8C%E6%98%AF%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</id>
    <published>2025-07-21T16:47:47.000Z</published>
    <updated>2025-08-06T18:22:57.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这里是新的开始"><a href="#这里是新的开始" class="headerlink" title="这里是新的开始"></a>这里是新的开始</h1><h2 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h2><h3 id="博客采用的是hexo框架，主题是-hexo-theme-anzhiyu。"><a href="#博客采用的是hexo框架，主题是-hexo-theme-anzhiyu。" class="headerlink" title="博客采用的是hexo框架，主题是 hexo-theme-anzhiyu。"></a>博客采用的是hexo框架，主题是 <a href="https://docs.anheyu.com/">hexo-theme-anzhiyu</a>。</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;这里是新的开始&quot;&gt;&lt;a href=&quot;#这里是新的开始&quot; class=&quot;headerlink&quot; title=&quot;这里是新的开始&quot;&gt;&lt;/a&gt;这里是新的开始&lt;/h1&gt;&lt;h2 id=&quot;欢迎来到我的博客&quot;&gt;&lt;a href=&quot;#欢迎来到我的博客&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Hexo框架" scheme="http://example.com/categories/Hexo%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
